{
    "enabled": true,
    "description": "The Solr pipeline connects to a Solr cluster with ReactiveSearch API, enabling frontend UIs to be built using ReactiveSearch and SearchBox UI kits for React, Vue, Flutter, and JavaScript",
    "routes": [
        {
            "path": "/_solr/_reactivesearch",
            "method": "POST",
            "classify": {
                "category": "reactivesearch"
            }
        },
        {
            "path": "/_solr/_reactivesearch.v3",
            "method": "POST",
            "classify": {
                "category": "reactivesearch"
            }
        },
        {
            "path": "/_solr/_reactivesearch/validate",
            "method": "POST",
            "classify": {
                "category": "reactivesearch"
            }
        }
    ],
    "envs": {
        "SOLR_CREDS": "${{SOLR_CREDS}}",
        "SOLR_HOST": "${{SOLR_HOST_IP}}",
        "protocol": "http"
    },
    "global_envs": [
        {
            "label": "Solr Host",
            "description": "The IP address to the Solr host along with the port",
            "key": "SOLR_HOST",
            "value": "",
            "validate": {
                "url": "${SOLR_HOST}",
                "method": "GET",
                "headers": {
                    "Authorization": "`Basic ${btoa(${SOLR_CREDS})}`"
                },
                "expected_status": 200
            }
        },
        {
            "label": "Solr Credentials",
            "description": "The credentials to access the above Solr host.",
            "key": "SOLR_CREDS",
            "value": "",
            "validate": {
                "url": "${SOLR_HOST}",
                "method": "GET",
                "headers": {
                    "Authorization": "`Basic ${btoa(${SOLR_CREDS})}`"
                },
                "expected_status": 200
            }
        }
    ],
    "stages": [
        {
            "id": "auth",
            "use": "authorization"
        },
        {
            "id": "extract app and profile",
            "script": "function handleRequest() { const body = JSON.parse(context.request.body); const metadata = body.metadata; if (metadata == undefined || metadata.app == undefined || metadata.profile == undefined) { throw Error('`metadata.app` and`metadata.profile`are required fields!'); } return { solrApp: metadata.app, solrProfile: metadata.profile } }",
            "continueOnError": false,
            "trigger": {
                "expression": "context.envs.path != '/_solr/_reactivesearch/validate'"
            }
        },
        {
            "id": "extract solr host and credentials",
            "script": "function handleRequest() { return { \"solrHost\": context.envs.SOLR_HOST, \"solrCreds\": context.envs.SOLR_CREDS } }",
            "continueOnError": false,
            "trigger": {
                "expression": "context.envs.path != '/_solr/_reactivesearch/validate'"
            }
        },
        {
            "id": "rs",
            "use": "reactivesearchQuery",
            "inputs": {
                "backend": "solr"
            },
            "continueOnError": false
        },
        {
            "id": "generate the query",
            "script": "function handleRequest() { const queries = JSON.parse(context.request.body); const URL = `${context.envs.protocol}://${context.envs.solrHost}/api/apps/${context.solrApp}/query/${context.solrProfile}`; var headers = { Authorization: `Basic ${btoa(context.envs.solrCreds)}` }; const BLACKLISTED_HEADERS = ['Authorization']; for (var key in BLACKLISTED_HEADERS) { if (key in headers) { delete headers[key]; } } var generatedURIs = {}; var validateResponse = []; for (var key of Object.keys(queries)) { const queryEach = queries[key]; const generatedEach = { original: JSON.parse(queryEach['_original']) }; delete queryEach['_original']; const isEndpoint = queryEach['_isEndpoint'] == 'true'; if (!isEndpoint) { generatedURIs[key] = generatedEach; generatedEach['built'] = '?' + Object.keys(queryEach) .reduce(function (a, k) { a.push(k + '=' + encodeURIComponent(queryEach[k])); return a; }, []) .join('&'); const finalURL = URL + generatedEach['built']; validateResponse.push({ id: key, endpoint: { url: finalURL, method: 'GET', headers: headers, body: {}, }, }); } else { validateResponse.push({ id: queryEach['id'], endpoint: queryEach['endpoint'], }); } } return { response: { body: JSON.stringify(validateResponse), code: 200 } }; }",
            "continueOnError": false,
            "trigger": {
                "expression": "context.envs.path == '/_solr/_reactivesearch/validate'"
            },
            "needs": [
                "extract solr host and credentials",
                "extract app and profile"
            ]
        },
        {
            "id": "solr_query",
            "use": "solrQuery",
            "continueOnError": false,
            "trigger": {
                "expression": "context.envs.path != '/_solr/_reactivesearch/validate'"
            },
            "inputs": {
                "protocol": "{{protocol}}",
                "host": "{{solrHost}}",
                "app": "{{solrApp}}",
                "profile": "{{solrProfile}}",
                "credentials": "{{solrCreds}}"
            },
            "needs": [
                "extract solr host and credentials",
                "extract app and profile"
            ]
        }
    ]
}