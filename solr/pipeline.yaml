enabled: true
routes:
- path: "/_solr/_reactivesearch"
  method: POST
  classify:
    category: reactivesearch
- path: "/_solr/_reactivesearch.v3"
  method: POST
  classify:
    category: reactivesearch
- path: "/_solr/_reactivesearch/validate"
  method: POST
  classify:
    category: reactivesearch

envs:
  SOLR_CREDS: ${{SOLR_CREDS}}
  SOLR_HOST: ${{SOLR_HOST_IP}}


global_envs:
  - label: Solr Host
    description: The IP address to the Solr host along with the port
    key: SOLR_HOST
    value: ""
    validate:
      url: ${SOLR_HOST}
      method: GET
      headers:
        Authorization: "`Basic ${btoa(${SOLR_CREDS})}`"
      expected_status: 200
  - label: Solr Credentials
    description: The credentials to access the above Solr host.
    key: SOLR_CREDS
    value: ""
    validate:
      url: ${SOLR_HOST}
      method: GET
      headers:
        Authorization: "`Basic ${btoa(${SOLR_CREDS})}`"
      expected_status: 200

stages:
- id: auth
  use: authorization
- id: extract app and profile
  scriptRef: 'extractMetadata.js'
  continueOnError: false
  trigger:
    expression: "context.envs.path != '/_solr/_reactivesearch/validate'"
- id: extract solr host and credentials
  scriptRef: 'setEnvironment.js'
  continueOnError: false
  trigger:
    expression: "context.envs.path != '/_solr/_reactivesearch/validate'"
- id: rs
  use: reactivesearchQuery
  inputs:
    backend: solr
  continueOnError: false
- id: generate the query
  scriptRef: generateQuery.js
  continueOnError: false
  trigger:
    expression: "context.envs.path == '/_solr/_reactivesearch/validate'"
- id: solr_query
  use: solrQuery
  continueOnError: false
  trigger:
    expression: "context.envs.path != '/_solr/_reactivesearch/validate'"
  inputs:
    protocol: http
    host: "{{solrHost}}"
    app: "{{solrApp}}"
    profile: "{{solrProfile}}"
    credentials: "{{solrCreds}}"
