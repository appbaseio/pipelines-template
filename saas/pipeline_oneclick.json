{
    "enabled": true,
    "description": "SaaS Example Pipeline on ReactiveSearch docs dataset",
    "routes": [
      {
        "path": "/unified-reactivesearch-web-data-saas/_reactivesearch",
        "method": "POST",
        "classify": {
          "category": "reactivesearch"
        }
      }
    ],
    "envs": {
      "index": [
        "unified-reactivesearch-web-data"
      ]
    },
    "stages": [
      {
        "id": "auth",
        "use": "authorization"
      },
      {
        "id": "generateRequest",
        "script": "function handleRequest() { const queryTerm = context.envs.query || ''; /* verifying that format of query is as expected before modifying */ const requestBody = JSON.parse(context.request.body); /* Iterate through and if there is a suggestion or search query, update it * with the extra fields. **/ requestBody.query.forEach((queryEach, queryIndex) => { /* If the query type is term and is called `result`, change type * to term */ if (queryEach.type == 'term' && queryEach.id == 'result') { queryEach.type = 'search'; } if (queryEach.type == 'suggestion') { requestBody.query[queryIndex] = updateSuggestionsQuery( queryTerm, queryEach ); } else if (queryEach.type == 'search' || !queryEach.type) { requestBody.query[queryIndex] = updateSearchQuery(queryTerm, queryEach); } }); return { request: { body: JSON.stringify(requestBody), }, }; } function updateSuggestionsQuery(queryTerm, suggestionQuery) { const queryLength = queryTerm.length; const dataFields = [ { field: 'title', weight: 6, }, { field: 'heading', weight: 4, }, { field: 'pageURL', weight: 4, }, { field: 'url', weight: 4, }, { field: 'tokens.keyword', weight: 2, }, { field: 'category', weight: 2, }, ]; suggestionQuery['dataField'] = dataFields; suggestionQuery['queryFormat'] = 'and'; suggestionQuery['distinctField'] = 'category.keyword'; /* Responding to the user intent based on the query length */ if (queryLength <= 6) { // user is perhaps checking out the search suggestionQuery.enablePopularSuggestions = false; suggestionQuery.enableFeaturedSuggestions = false; suggestionQuery.enableRecentSuggestions = false; suggestionQuery.enableDocumentSuggestions = true; /* suggestionQuery.indexSuggestionsConfig = { size: 5 }; */ /* suggestionQuery.documentSuggestionsConfig = { * sectionLabel: 'Recently Viewed', *}; *suggestionQuery.indexSuggestionsConfig = { // sectionLabel: 'Search Results', //}; */ suggestionQuery.showDistinctSuggestions = true; } else if (queryLength >= 7 && queryLength <= 12) { // user is looking for something specific suggestionQuery.enablePopularSuggestions = false; suggestionQuery.enableFeaturedSuggestions = false; suggestionQuery.enableRecentSuggestions = true; /* suggestionQuery.indexSuggestionsConfig = { size: 5 }; */ suggestionQuery.showDistinctSuggestions = true; /* suggestionQuery.documentSuggestionsConfig = { * sectionLabel: 'Recently Viewed', *}; *suggestionQuery.indexSuggestionsConfig = { // sectionLabel: 'Search Results', //}; */ } else if (queryLength >= 13) { // user is definitely looking for something specific suggestionQuery.enableRecentSuggestions = false; suggestionQuery.enablePopularSuggestions = false; suggestionQuery.enableFeaturedSuggestions = false; /* suggestionQuery.indexSuggestionsConfig = { size: 5 }; */ suggestionQuery.showDistinctSuggestions = true; /*suggestionQuery.indexSuggestionsConfig = { // sectionLabel: 'Search Results', //}; */ } return suggestionQuery; } function updateSearchQuery(queryTerm, searchQuery) { const queryLength = queryTerm.length; const dataFields = [ { field: 'title', weight: 6, }, { field: 'heading', weight: 4, }, { field: 'pageURL', weight: 4, }, { field: 'url', weight: 4, }, { field: 'tokens.keyword', weight: 2, }, { field: 'category', weight: 2, }, ]; searchQuery['dataField'] = dataFields; searchQuery['queryFormat'] = 'and'; searchQuery['distinctField'] = 'category.keyword'; if ( queryLength >= 20 && queryTerm.split(' ').length >= 4 && queryTerm[queryTerm.length - 1] == '?' ) { searchQuery['enableAI'] = true; } return searchQuery; }",
        "continueOnError": false
      },
      {
        "id": "query",
        "use": "reactivesearchQuery",
        "continueOnError": false
      },
      {
        "id": "es_query",
        "use": "elasticsearchQuery",
        "continueOnError": false
      },
      {
        "id": "typo check",
        "script": "function handleRequest() { const queryTerm = context.envs.query; if (queryTerm && queryTerm.length < 5) { return {}; } const responseBody = JSON.parse(context.response.body); if ( responseBody.search?.hits?.hits?.length != 0 && responseBody.result?.hits?.hits?.length != 0 ) { return {}; } /* Extract the RS body */ const rsBody = JSON.parse(context.envs['ORIGINAL_RS_BODY']); let fuzziness = 1; if (queryTerm && queryTerm.length >= 5 && queryTerm.length <= 9) { fuzziness = 1; } else { fuzziness = 2; } rsBody.query?.forEach((queryEach, queryIndex) => { queryEach.fuzziness = fuzziness; rsBody.query[queryIndex] = queryEach; }); return { request: { body: JSON.stringify(rsBody), }, envs: { research: true, ...context.envs, }, }; }",
        "continueOnError": false
      },
      {
        "id": "researchQuery",
        "use": "reactivesearchQuery",
        "continueOnError": false,
        "trigger": {
          "expression": "context.envs.research == true"
        }
      },
      {
        "id": "research_es_query",
        "use": "elasticsearchQuery",
        "continueOnError": false,
        "trigger": {
          "expression": "context.envs.research == true"
        }
      },
      {
        "id": "normalize-url",
        "script": "function handleRequest() { /* Iterate through the hits and normalize the URL field * in them **/ const responseBody = JSON.parse(context.response.body); let resultHits = responseBody.result?.hits?.hits; if (resultHits) { resultHits.forEach((resultHit, resultIndex) => { if (resultHit.url && resultHit._source.url.startsWith('http')) return; /* For blogs, category will be the url */ if (resultHit._source.category.startsWith('http')) { resultHit._source.url = resultHit._source.category; resultHits[resultIndex] = resultHit; return; } resultHit._source.url = 'https://docs.reactivesearch.io' + resultHit._source.pageURL; resultHits[resultIndex] = resultHit; }); responseBody.result.hits.hits = resultHits; } let searchHits = responseBody.search?.hits?.hits; if (searchHits) { searchHits.forEach((searchHit, searchIndex) => { if (searchHit.url && searchHit._source.url.startsWith('http')) return; searchHit._source.url = 'https://docs.reactivesearch.io' + searchHit._source.pageURL; searchHits[searchIndex] = searchHit; }); responseBody.search.hits.hits = searchHits; } return { response: { body: JSON.stringify(responseBody), }, }; }",
        "continueOnError": false
      },
      {
        "id": "answerAI",
        "use": "AIAnswer",
        "enabled": false,
        "inputs": {
          "topDocsForContext": 3,
          "docTemplate": "${source.name}",
          "queryTemplate": "Can you tell me about: ${value}",
          "apiKey": "{{ context.envs.openAIConfig.open_ai_key }}"
        }
      }
    ]
  }